
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b8  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000880  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000047d  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 eb       	ldi	r30, 0xB8	; 184
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	2c c0       	rjmp	.+88     	; 0xb4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB= DDRB | (1<<PB1)|(1<<PB3);
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	8a 60       	ori	r24, 0x0A	; 10
  62:	87 bb       	out	0x17, r24	; 23
	DDRC= DDRC | (1<<PC2)|(1<<PC4);
  64:	84 b3       	in	r24, 0x14	; 20
  66:	84 61       	ori	r24, 0x14	; 20
  68:	84 bb       	out	0x14, r24	; 20
	
    while(1)
    {
		PORTB= PORTB | (1<<PB1)|(1<<PB3);
  6a:	88 b3       	in	r24, 0x18	; 24
  6c:	8a 60       	ori	r24, 0x0A	; 10
  6e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	8f e4       	ldi	r24, 0x4F	; 79
  72:	93 ec       	ldi	r25, 0xC3	; 195
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <main+0x16>
  78:	00 c0       	rjmp	.+0      	; 0x7a <main+0x1c>
  7a:	00 00       	nop
		_delay_ms(200);
		PORTC= PORTC | (1<<PC2)|(1<<PC4);
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	84 61       	ori	r24, 0x14	; 20
  80:	85 bb       	out	0x15, r24	; 21
  82:	8f e4       	ldi	r24, 0x4F	; 79
  84:	93 ec       	ldi	r25, 0xC3	; 195
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x28>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x2e>
  8c:	00 00       	nop
		_delay_ms(200);
		PORTB= PORTB  & ~((1<<PB1)|(1<<PB3));
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	85 7f       	andi	r24, 0xF5	; 245
  92:	88 bb       	out	0x18, r24	; 24
  94:	8f e4       	ldi	r24, 0x4F	; 79
  96:	93 ec       	ldi	r25, 0xC3	; 195
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x3a>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x40>
  9e:	00 00       	nop
		_delay_ms(200);
		PORTC= PORTC  & ~((1<<PC2)|(1<<PC4));
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8b 7e       	andi	r24, 0xEB	; 235
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x4c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x52>
  b0:	00 00       	nop
  b2:	db cf       	rjmp	.-74     	; 0x6a <main+0xc>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
